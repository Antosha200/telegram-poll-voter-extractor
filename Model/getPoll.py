import asyncio
import os
from telethon import TelegramClient
from telethon.tl.types import MessageMediaPoll
from telethon.tl.functions.messages import GetPollVotesRequest
from Model.config import load_config

cfg = load_config()
SESSION_PATH = os.path.join(os.path.dirname(__file__), cfg['session_name'])
client = TelegramClient(SESSION_PATH, cfg['api_id'], cfg['api_hash'])

async def fetch_last_poll():
    await client.start()
    async for msg in client.iter_messages(cfg['chat_username'], limit=200):
        if isinstance(msg.media, MessageMediaPoll):
            return msg
    return None

async def fetch_voters_for_option(msg, option_bytes: bytes):
    voters = []
    while True:
        try:
            result = await client(GetPollVotesRequest(
                peer=msg.peer_id,
                id=msg.id,
                option=option_bytes,
                limit=100
            ))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å—É—é—â–∏—Ö: {e}")
            break

        voters.extend(result.users)

        # –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ñ—Ñ—Å–µ—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if not result.next_offset:
            break

    return voters

async def main():
    msg = await fetch_last_poll()
    if not msg:
        print("–í —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.")
        return

    poll = msg.media.poll
    results = msg.media.results

    if not poll.public_voters:
        print("‚ùå –û–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º ‚Äî –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö.")
        return

    question = getattr(poll.question, 'text', str(poll.question))
    print(f"\n{msg.date:%Y-%m-%d %H:%M:%S}")
    print(f"\n {question}\n")

    for answer, poll_result in zip(poll.answers, results.results):
        ans_text = getattr(answer.text, 'text', str(answer.text))
        raw_opt  = answer.option

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ "—Å—ã—Ä—ã–µ" –±–∞–π—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ int
        if isinstance(raw_opt, int):
            option_bytes = bytes([raw_opt])
        elif isinstance(raw_opt, (bytes, bytearray)):
            option_bytes = raw_opt
        else:
            raise TypeError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø answer.option: {type(raw_opt)}")

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±–∞–π—Ç—ã
        print(f"üîπ {ans_text}")

        voters = await fetch_voters_for_option(msg, option_bytes)
        if not voters:
            print("")
            continue

        for user in voters:
            name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            display = name or (f"@{user.username}" if user.username else f"(ID: {user.id})")
            print(f"   ‚Ä¢ {display}")
        print()

if __name__ == '__main__':
    asyncio.run(main())
