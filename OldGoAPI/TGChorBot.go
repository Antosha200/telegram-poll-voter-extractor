package main

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞
var lastPoll *tgbotapi.Poll

func printPoll(poll *tgbotapi.Poll) {
	fmt.Printf("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å: %s\n", poll.Question)
	for _, option := range poll.Options {
		fmt.Printf("- %s: %d –≥–æ–ª–æ—Å–æ–≤\n", option.Text, option.VoterCount)
	}
	fmt.Println("---")
}

func main() {
	bot, err := tgbotapi.NewBotAPI("8154988101:AAEpDS6ZnfcNGhc6lg3FYzVZAW83N13gaHU")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("üü¢ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 10
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			fmt.Printf("–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s\n", update.Message.From.UserName, update.Message.Text)
		}

		chatID := update.Message.Chat.ID
		fmt.Printf(strconv.FormatInt(chatID, 10))

		//–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
		//msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏ –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.")
		//_, _ = bot.Send(msg)

		for update := range updates {

			// 1) –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥)
			if update.Message != nil {
				fmt.Printf("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s\n",
					update.Message.From.UserName,
					update.Message.Text,
				)
			}

			// 2) –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å
			if update.Message != nil && update.Message.Poll != nil {
				lastPoll = update.Message.Poll
				fmt.Printf("\nüì• –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å: %s\n", lastPoll.Question)
				for _, opt := range lastPoll.Options {
					fmt.Printf("- %s (0 –≥–æ–ª–æ—Å–æ–≤ –ø–æ–∫–∞)\n", opt.Text)
				}
				fmt.Println("---")
			}

			// 3) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω–æ–º –æ–ø—Ä–æ—Å–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –±–æ—Ç–æ–º
			if update.PollAnswer != nil {
				pa := update.PollAnswer
				user := pa.User
				// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
				fullName := user.FirstName
				if user.LastName != "" {
					fullName += " " + user.LastName
				}
				// –ü–µ—á–∞—Ç–∞–µ–º, –∫—Ç–æ –∏ –∑–∞ –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
				fmt.Printf("‚úÖ –ì–æ–ª–æ—Å –æ—Ç %s", fullName)
				if user.UserName != "" {
					fmt.Printf(" (@%s)", user.UserName)
				}
				fmt.Printf(": –≤—ã–±—Ä–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã %v\n", pa.OptionIDs)

				// –ü–æ –∂–µ–ª–∞–Ω–∏—é —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
				if lastPoll != nil {
					printPoll(lastPoll)
				}
			}

			// 4) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ (update.Poll)
			if update.Poll != nil {
				lastPoll = update.Poll
				fmt.Println("üîÑ –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å:")
				printPoll(lastPoll)
			}
		}
	}

}
